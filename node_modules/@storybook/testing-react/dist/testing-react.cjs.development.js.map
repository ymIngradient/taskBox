{"version":3,"file":"testing-react.cjs.development.js","sources":["../src/utils.tsx","../src/index.ts"],"sourcesContent":["import React from 'react';\n\nimport type { FunctionComponent } from 'react';\nimport type { Story } from '@storybook/react';\nimport type { TestingStory } from './types';\n\nexport const globalRender: Story = (args, { parameters }) => {\n  if (!parameters.component) {\n    throw new Error(`\n      Could not render story due to missing 'component' property in Meta.\n      Please refer to https://github.com/storybookjs/testing-react#csf3\n    `);\n  }\n\n  const Component = parameters.component as FunctionComponent;\n  return <Component {...args} />;\n};\n\nconst invalidStoryTypes = new Set(['string', 'number', 'boolean', 'symbol']);\n\nexport const isInvalidStory = (story?: any) => (!story || Array.isArray(story) || invalidStoryTypes.has(typeof story))\n\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T];\nexport function objectEntries<T extends object>(t: T): Entries<T>[] {\n  return Object.entries(t) as any;\n}\n\nexport const getStoryName = (story: TestingStory) => {\n  if(story.storyName) {\n    return story.storyName\n  }\n\n  if(typeof story !== 'function' && story.name) {\n    return story.name\n  }\n\n  return undefined\n}","import { defaultDecorateStory, combineParameters } from '@storybook/client-api';\nimport addons, { mockChannel } from '@storybook/addons';\nimport type { Meta, StoryContext, ReactFramework } from '@storybook/react';\nimport { isExportStory } from '@storybook/csf'\n\nimport type { GlobalConfig, StoriesWithPartialProps, StoryFile, TestingStory, TestingStoryPlayContext } from './types';\nimport { getStoryName, globalRender, isInvalidStory, objectEntries } from './utils';\n\n// Some addons use the channel api to communicate between manager/preview, and this is a client only feature, therefore we must mock it.\naddons.setChannel(mockChannel());\n\nlet globalStorybookConfig = {};\n\n\nconst isValidStoryExport = (storyName: string, nonStoryExportsConfig = {}) =>\nisExportStory(storyName, nonStoryExportsConfig) && storyName !== '__namedExportsOrder'\n\n/** Function that sets the globalConfig of your storybook. The global config is the preview module of your .storybook folder.\n *\n * It should be run a single time, so that your global config (e.g. decorators) is applied to your stories when using `composeStories` or `composeStory`.\n *\n * Example:\n *```jsx\n * // setup.js (for jest)\n * import { setGlobalConfig } from '@storybook/testing-react';\n * import * as globalStorybookConfig from './.storybook/preview';\n *\n * setGlobalConfig(globalStorybookConfig);\n *```\n *\n * @param config - e.g. (import * as globalConfig from '../.storybook/preview')\n */\nexport function setGlobalConfig(config: GlobalConfig) {\n  globalStorybookConfig = config;\n}\n\n/**\n * Function that will receive a story along with meta (e.g. a default export from a .stories file)\n * and optionally a globalConfig e.g. (import * from '../.storybook/preview)\n * and will return a composed component that has all args/parameters/decorators/etc combined and applied to it.\n *\n *\n * It's very useful for reusing a story in scenarios outside of Storybook like unit testing.\n *\n * Example:\n *```jsx\n * import { render } from '@testing-library/react';\n * import { composeStory } from '@storybook/testing-react';\n * import Meta, { Primary as PrimaryStory } from './Button.stories';\n *\n * const Primary = composeStory(PrimaryStory, Meta);\n *\n * test('renders primary button with Hello World', () => {\n *   const { getByText } = render(<Primary>Hello world</Primary>);\n *   expect(getByText(/Hello world/i)).not.toBeNull();\n * });\n *```\n *\n * @param story\n * @param meta - e.g. (import Meta from './Button.stories')\n * @param [globalConfig] - e.g. (import * as globalConfig from '../.storybook/preview') this can be applied automatically if you use `setGlobalConfig` in your setup files.\n */\nexport function composeStory<GenericArgs>(\n  story: TestingStory<GenericArgs>,\n  meta: Meta<GenericArgs | any>,\n  globalConfig: GlobalConfig = globalStorybookConfig\n) {\n\n  if (isInvalidStory(story)) {\n    throw new Error(\n      `Cannot compose story due to invalid format. @storybook/testing-react expected a function/object but received ${typeof story} instead.`\n    );\n  }\n\n  if (story.story !== undefined) {\n  throw new Error(\n      `StoryFn.story object-style annotation is not supported. @storybook/testing-react expects hoisted CSF stories.\n       https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#hoisted-csf-annotations`\n    );\n  }\n\n  const renderFn = typeof story === 'function' ?  story : story.render ?? globalRender;\n  const finalStoryFn = (context: StoryContext<ReactFramework, GenericArgs>) => {\n    const { passArgsFirst = true } = context.parameters;\n    if (!passArgsFirst) {\n      throw new Error(\n        'composeStory does not support legacy style stories (with passArgsFirst = false).'\n      );\n    }\n\n    return renderFn(context.args, context);\n  };\n\n  const combinedDecorators = [\n    ...(story.decorators || []),\n    ...(meta?.decorators || []),\n    ...(globalConfig.decorators || []),\n  ];\n\n  const decorated = defaultDecorateStory<ReactFramework>(\n    finalStoryFn as any,\n    combinedDecorators as any\n  );\n\n  const defaultGlobals = Object.entries(\n    (globalConfig.globalTypes || {}) as Record<string, { defaultValue: any }>\n  ).reduce((acc, [arg, { defaultValue }]) => {\n    if (defaultValue) {\n      acc[arg] = defaultValue;\n    }\n    return acc;\n  }, {} as Record<string, { defaultValue: any }>);\n\n  const combinedParameters = combineParameters(\n    globalConfig.parameters || {},\n    meta?.parameters || {},\n    story.parameters || {},\n    { component: meta?.component }\n  )\n\n  const combinedArgs = { \n    ...meta?.args,\n    ...story.args\n  } as GenericArgs\n\n  const context = {\n    componentId: '',\n    kind: '',\n    title: '',\n    id: '',\n    name: '',\n    story: '',\n    argTypes: globalConfig.argTypes || {},\n    globals: defaultGlobals,\n    parameters: combinedParameters,\n    initialArgs: combinedArgs,\n    args: combinedArgs,\n    viewMode: 'story',\n    originalStoryFn: renderFn,\n  } as StoryContext<ReactFramework, GenericArgs>;\n\n  const composedStory = (extraArgs: Partial<GenericArgs>) => {\n    return decorated({\n      ...context,\n      args: {\n        ...combinedArgs, ...extraArgs\n      }\n    })\n  }\n\n  const boundPlay = ({ ...extraContext }: TestingStoryPlayContext<GenericArgs>) => {\n    return story.play?.({ ...context, ...extraContext });\n  }\n  \n  composedStory.storyName = story.storyName || story.name\n  composedStory.args = combinedArgs\n  composedStory.play = boundPlay;\n  composedStory.decorators = combinedDecorators\n  composedStory.parameters = combinedParameters\n\n  return composedStory\n}\n\n/**\n * Function that will receive a stories import (e.g. `import * as stories from './Button.stories'`)\n * and optionally a globalConfig (e.g. `import * from '../.storybook/preview`)\n * and will return an object containing all the stories passed, but now as a composed component that has all args/parameters/decorators/etc combined and applied to it.\n *\n *\n * It's very useful for reusing stories in scenarios outside of Storybook like unit testing.\n *\n * Example:\n *```jsx\n * import { render } from '@testing-library/react';\n * import { composeStories } from '@storybook/testing-react';\n * import * as stories from './Button.stories';\n *\n * const { Primary, Secondary } = composeStories(stories);\n *\n * test('renders primary button with Hello World', () => {\n *   const { getByText } = render(<Primary>Hello world</Primary>);\n *   expect(getByText(/Hello world/i)).not.toBeNull();\n * });\n *```\n *\n * @param storiesImport - e.g. (import * as stories from './Button.stories')\n * @param [globalConfig] - e.g. (import * as globalConfig from '../.storybook/preview') this can be applied automatically if you use `setGlobalConfig` in your setup files.\n */\nexport function composeStories<\n  TModule extends StoryFile\n>(storiesImport: TModule, globalConfig?: GlobalConfig) {\n  const { default: meta, __esModule, ...stories } = storiesImport;\n\n  // This function should take this as input: \n  // {\n  //   default: Meta,\n  //   Primary: Story<ButtonProps>, <-- Props extends Args\n  //   Secondary: Story<OtherProps>,\n  // }\n    \n  // And strips out default, then return composed stories as output: \n  // {\n  //   Primary: ComposedStory<Partial<ButtonProps>>,\n  //   Secondary: ComposedStory<Partial<OtherProps>>,\n  // }\n\n  // Compose an object containing all processed stories passed as parameters\n  const composedStories = objectEntries(stories).reduce<Partial<StoriesWithPartialProps<TModule>>>(\n    (storiesMap, [key, _story]) => {\n      const storyName = String(key)\n      // filter out non-story exports\n      if(!isValidStoryExport(storyName, meta)) {\n        return storiesMap;\n      }\n      \n      const story = _story as TestingStory\n      story.storyName = getStoryName(story) || storyName\n      const result = Object.assign(storiesMap, {\n        [key]: composeStory(story, meta, globalConfig)\n      });\n      return result;\n    },\n    {}\n  );\n\n  // @TODO: the inferred type of composedStories is correct but Partial.\n  // investigate whether we can return an unpartial type of that without this hack\n  return composedStories as unknown as Omit<StoriesWithPartialProps<TModule>, keyof StoryFile>;\n}"],"names":["globalRender","args","parameters","component","Error","Component","React","invalidStoryTypes","Set","isInvalidStory","story","Array","isArray","has","objectEntries","t","Object","entries","getStoryName","storyName","name","undefined","addons","setChannel","mockChannel","globalStorybookConfig","isValidStoryExport","nonStoryExportsConfig","isExportStory","setGlobalConfig","config","composeStory","meta","globalConfig","renderFn","render","finalStoryFn","context","passArgsFirst","combinedDecorators","decorators","decorated","defaultDecorateStory","defaultGlobals","globalTypes","reduce","acc","arg","defaultValue","combinedParameters","combineParameters","combinedArgs","componentId","kind","title","id","argTypes","globals","initialArgs","viewMode","originalStoryFn","composedStory","extraArgs","boundPlay","extraContext","play","composeStories","storiesImport","__esModule","stories","composedStories","storiesMap","key","_story","String","result","assign"],"mappings":"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"}